// Code generated by go-swagger; DO NOT EDIT.

package blog_post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/john-k-antony/richpanel-blogposts-golang/models"
)

// CreateBlogpostHandlerFunc turns a function with the right signature into a create blogpost handler
type CreateBlogpostHandlerFunc func(CreateBlogpostParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateBlogpostHandlerFunc) Handle(params CreateBlogpostParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateBlogpostHandler interface for that can handle valid create blogpost params
type CreateBlogpostHandler interface {
	Handle(CreateBlogpostParams, *models.Principal) middleware.Responder
}

// NewCreateBlogpost creates a new http.Handler for the create blogpost operation
func NewCreateBlogpost(ctx *middleware.Context, handler CreateBlogpostHandler) *CreateBlogpost {
	return &CreateBlogpost{Context: ctx, Handler: handler}
}

/*
	CreateBlogpost swagger:route POST /posts BlogPost createBlogpost

# Create a new blog post

Create a new blog post.
*/
type CreateBlogpost struct {
	Context *middleware.Context
	Handler CreateBlogpostHandler
}

func (o *CreateBlogpost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateBlogpostParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateBlogpostBody create blogpost body
//
// swagger:model CreateBlogpostBody
type CreateBlogpostBody struct {

	// contents
	Contents *string `json:"contents,omitempty" bson:"contents,omitempty"`

	// title
	// Required: true
	Title *string `json:"title" bson:"title"`
}

// Validate validates this create blogpost body
func (o *CreateBlogpostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBlogpostBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create blogpost body based on context it is used
func (o *CreateBlogpostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBlogpostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBlogpostBody) UnmarshalBinary(b []byte) error {
	var res CreateBlogpostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
