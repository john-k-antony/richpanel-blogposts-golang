// Code generated by go-swagger; DO NOT EDIT.

package blog_post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/john-k-antony/richpanel-blogposts-golang/models/apimodels"
)

// DeleteBlogpostByIDOKCode is the HTTP code returned for type DeleteBlogpostByIDOK
const DeleteBlogpostByIDOKCode int = 200

/*
DeleteBlogpostByIDOK Blog post deleted

swagger:response deleteBlogpostByIdOK
*/
type DeleteBlogpostByIDOK struct {

	/*
	  In: Body
	*/
	Payload *apimodels.Blogpost `json:"body,omitempty"`
}

// NewDeleteBlogpostByIDOK creates DeleteBlogpostByIDOK with default headers values
func NewDeleteBlogpostByIDOK() *DeleteBlogpostByIDOK {

	return &DeleteBlogpostByIDOK{}
}

// WithPayload adds the payload to the delete blogpost by Id o k response
func (o *DeleteBlogpostByIDOK) WithPayload(payload *apimodels.Blogpost) *DeleteBlogpostByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete blogpost by Id o k response
func (o *DeleteBlogpostByIDOK) SetPayload(payload *apimodels.Blogpost) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBlogpostByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteBlogpostByIDUnauthorizedCode is the HTTP code returned for type DeleteBlogpostByIDUnauthorized
const DeleteBlogpostByIDUnauthorizedCode int = 401

/*
DeleteBlogpostByIDUnauthorized Unauthenticated Request

swagger:response deleteBlogpostByIdUnauthorized
*/
type DeleteBlogpostByIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *apimodels.ResponseError `json:"body,omitempty"`
}

// NewDeleteBlogpostByIDUnauthorized creates DeleteBlogpostByIDUnauthorized with default headers values
func NewDeleteBlogpostByIDUnauthorized() *DeleteBlogpostByIDUnauthorized {

	return &DeleteBlogpostByIDUnauthorized{}
}

// WithPayload adds the payload to the delete blogpost by Id unauthorized response
func (o *DeleteBlogpostByIDUnauthorized) WithPayload(payload *apimodels.ResponseError) *DeleteBlogpostByIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete blogpost by Id unauthorized response
func (o *DeleteBlogpostByIDUnauthorized) SetPayload(payload *apimodels.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBlogpostByIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteBlogpostByIDNotFoundCode is the HTTP code returned for type DeleteBlogpostByIDNotFound
const DeleteBlogpostByIDNotFoundCode int = 404

/*
DeleteBlogpostByIDNotFound Blog post not found

swagger:response deleteBlogpostByIdNotFound
*/
type DeleteBlogpostByIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *apimodels.ResponseError `json:"body,omitempty"`
}

// NewDeleteBlogpostByIDNotFound creates DeleteBlogpostByIDNotFound with default headers values
func NewDeleteBlogpostByIDNotFound() *DeleteBlogpostByIDNotFound {

	return &DeleteBlogpostByIDNotFound{}
}

// WithPayload adds the payload to the delete blogpost by Id not found response
func (o *DeleteBlogpostByIDNotFound) WithPayload(payload *apimodels.ResponseError) *DeleteBlogpostByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete blogpost by Id not found response
func (o *DeleteBlogpostByIDNotFound) SetPayload(payload *apimodels.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBlogpostByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
