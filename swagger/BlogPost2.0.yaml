swagger: '2.0'
info:
  contact:
    email: john.k.antony@gmail.com
    name: John Antony
  description: REST API implementation for a simple blog post system
  title: BlogPost
  version: '1.0'
host: 'localhost:3000'
basePath: /
schemes:
  - http
paths:
  /posts:
    get:
      produces:
        - application/json
      parameters:
        - description: >-
            The number of items to skip before starting to collect the result
            set
          in: query
          name: offset
          type: integer
        - description: The numbers of items to return
          in: query
          name: limit
          type: integer
      responses:
        '200':
          description: Blog posts
          headers:
            Pagination-Count:
              description: Total number of items
              type: integer
            Pagination-Limit:
              description: Number of returned items
              type: integer
            Pagination-Page:
              description: Current page number
              type: integer
          schema:
            items:
              $ref: '#/definitions/Blogpost'
            type: array
        '401':
          description: Unauthenticated Request
          schema:
            $ref: '#/definitions/ResponseError'
      security:
        - APIKey: []
      tags:
        - BlogPost
      description: Retrieve the information of the blog posts.
      operationId: listBlogposts
      summary: 'List blog posts, with pagination'
      x-eov-operation-handler: handlers/blogpostsController
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Post the necessary fields for the API to create a new blog post.
          in: body
          name: body
          schema:
            properties:
              contents:
                type: string
                x-nullable: true
              title:
                type: string
            required:
              - title
            type: object
      responses:
        '201':
          description: Blog post created
          schema:
            $ref: '#/definitions/Blogpost'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ResponseError'
        '401':
          description: Unauthenticated Request
          schema:
            $ref: '#/definitions/ResponseError'
        '422':
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
      security:
        - APIKey: []
      tags:
        - BlogPost
      description: Create a new blog post.
      operationId: createBlogpost
      summary: Create a new blog post
      x-eov-operation-handler: handlers/blogpostsController
  '/posts/{id}':
    delete:
      produces:
        - application/json
      parameters:
        - description: Id of an existing blog post.
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Blog post deleted
          schema:
            $ref: '#/definitions/Blogpost'
        '401':
          description: Unauthenticated Request
          schema:
            $ref: '#/definitions/ResponseError'
        '404':
          description: Blog post not found
          schema:
            $ref: '#/definitions/ResponseError'
      security:
        - APIKey: []
      tags:
        - BlogPost
      description: Delete an existing blog post with the matching id.
      operationId: deleteBlogpostById
      summary: Delete blog post information
      x-eov-operation-handler: handlers/blogpostsController
    get:
      produces:
        - application/json
      parameters:
        - description: Id of an existing blog post.
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Blog post found
          schema:
            $ref: '#/definitions/Blogpost'
        '401':
          description: Unauthenticated Request
          schema:
            $ref: '#/definitions/ResponseError'
        '404':
          description: Blog post not found
          schema:
            $ref: '#/definitions/ResponseError'
      security:
        - APIKey: []
      tags:
        - BlogPost
      description: Retrieve the information of the blog post with the matching id.
      operationId: getBlogpostById
      summary: Get blog post by id
      x-eov-operation-handler: handlers/blogpostsController
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Id of an existing blog post.
          in: path
          name: id
          required: true
          type: string
        - description: Put blog post properties to update.
          in: body
          name: body
          schema:
            properties:
              contents:
                type: string
                x-nullable: true
              title:
                type: string
                x-nullable: true
            type: object
      responses:
        '200':
          description: Blog post updated
          schema:
            $ref: '#/definitions/Blogpost'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ResponseError'
        '401':
          description: Unauthenticated Request
          schema:
            $ref: '#/definitions/ResponseError'
        '404':
          description: Blog post not found
          schema:
            $ref: '#/definitions/ResponseError'
        '422':
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
      security:
        - APIKey: []
      tags:
        - BlogPost
      description: Update the information of an existing blog post with the matching id.
      operationId: updateBlogpostById
      summary: Update blog post information
      x-eov-operation-handler: handlers/blogpostsController
definitions:
  Blogpost:
    description: Blog post object
    properties:
      contents:
        type: string
      createdAt:
        description: The date that blog post was created.
        format: date-time
        type: string
        x-nullable: true
      id:
        description: Unique identifier for the given blog post.
        type: string
      modifiedAt:
        description: The date that blog post was modified.
        format: date-time
        type: string
        x-nullable: true
      title:
        type: string
      userId:
        description: Id of the user that created the blog post
        type: string
    required:
      - id
      - title
      - userId
    title: Blog Post
    type: object
  ResponseError:
    description: Response error object
    properties:
      errors:
        description: Nested errors if any.
        type: object
        x-nullable: true
      message:
        description: Error message.
        type: string
        x-nullable: true
    title: Response Error
    type: object
securityDefinitions:
  APIKey:
    description: JWT based authorization
    in: header
    name: Authorization
    type: apiKey
tags:
  - description: BlogPost API
    name: BlogPost
x-components: {}

