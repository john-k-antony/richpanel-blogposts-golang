// Code generated by go-swagger; DO NOT EDIT.

package apimodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Blogpost Blog Post
//
// # Blog post object
//
// swagger:model Blogpost
type Blogpost struct {

	// contents
	Contents string `json:"contents,omitempty" bson:"contents,omitempty"`

	// The date that blog post was created.
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty" bson:"createdAt,omitempty"`

	// Unique identifier for the given blog post.
	// Required: true
	ID *string `json:"id" bson:"id"`

	// The date that blog post was modified.
	// Format: date-time
	ModifiedAt *strfmt.DateTime `json:"modifiedAt,omitempty" bson:"modifiedAt,omitempty"`

	// title
	// Required: true
	Title *string `json:"title" bson:"title"`

	// Id of the user that created the blog post
	// Required: true
	UserID *string `json:"userId" bson:"userId"`
}

// Validate validates this blogpost
func (m *Blogpost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Blogpost) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Blogpost) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Blogpost) validateModifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedAt", "body", "date-time", m.ModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Blogpost) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *Blogpost) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this blogpost based on context it is used
func (m *Blogpost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Blogpost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Blogpost) UnmarshalBinary(b []byte) error {
	var res Blogpost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
